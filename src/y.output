Rules useless in parser due to conflicts

   45 Expr: MINUS


State 5 conflicts: 1 reduce/reduce
State 73 conflicts: 8 reduce/reduce
State 111 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: PACKAGE ID SEMICOLON Program_1

    2 Program_1: Declarations
    3          | %empty

    4 Declarations: VarDeclaration SEMICOLON Declarations
    5             | FuncDeclaration SEMICOLON Declarations
    6             | %empty

    7 VarDeclaration: VAR VarSpec
    8               | VAR LPAR VarSpec SEMICOLON RPAR

    9 VarSpec: ID '{' COMMA ID '}' Type

   10 Type: INT
   11     | FLOAT32
   12     | BOOL
   13     | STRING

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR '[' Type ']' FuncBody

   15 Parameters: ID Type '{' COMMA ID Type '}'

   16 FuncBody: LBRACE VarsAndStatements RBRACE

   17 VarsAndStatements: VarsAndStatements '[' VarDeclaration
   18                  | Statement ']' SEMICOLON
   19                  | %empty

   20 Statement: ID ASSIGN Expr
   21          | LBRACE '{' Statement SEMICOLON '}' RBRACE
   22          | IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'
   23          | FOR '[' Expr ']' LBRACE '{' Statement SEMICOLON '}' RBRACE
   24          | RETURN '[' Expr ']'
   25          | FuncInvocation
   26          | ParseArgs
   27          | PRINT LPAR '(' Expr
   28          | STRLIT ')' RPAR

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA Expr '}' ']' RPAR

   31 Expr: Expr '(' OR
   32     | AND ')' Expr
   33     | Expr '(' LT
   34     | GT
   35     | EQ
   36     | NE
   37     | LE
   38     | GE ')' Expr
   39     | Expr '(' PLUS
   40     | MINUS
   41     | STAR
   42     | DIV
   43     | MOD ')' Expr
   44     | '(' NOT
   45     | MINUS
   46     | PLUS ')' Expr
   47     | INTLIT
   48     | REALLIT
   49     | ID
   50     | FuncInvocation
   51     | LPAR Expr RPAR


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 27 31 33 39 44
    ')' (41) 28 32 38 43 46
    '[' (91) 14 17 22 23 24 30
    ']' (93) 14 18 22 23 24 30
    '{' (123) 9 15 21 22 23 30
    '}' (125) 9 15 21 22 23 30
    error (256)
    PACKAGE (258) 1
    ID (259) 1 9 14 15 20 29 30 49
    SEMICOLON (260) 1 4 5 8 18 21 22 23
    VAR (261) 7 8
    LPAR (262) 8 14 27 29 30 51
    RPAR (263) 8 14 28 29 30 51
    COMMA (264) 9 15 29 30
    INT (265) 10
    FLOAT32 (266) 11
    BOOL (267) 12
    STRING (268) 13
    RBRACE (269) 16 21 22 23
    LBRACE (270) 16 21 22 23
    ASSIGN (271) 20 29
    IF (272) 22
    ELSE (273) 22
    RETURN (274) 24
    FOR (275) 23
    PRINT (276) 27
    STRLIT (277) 28
    BLANKID (278) 29
    PARSEINT (279) 29
    CMDARGS (280) 29
    LSQ (281) 29
    RSQ (282) 29
    OR (283) 31
    AND (284) 32
    LT (285) 33
    GT (286) 34
    EQ (287) 35
    NE (288) 36
    LE (289) 37
    GE (290) 38
    PLUS (291) 39 46
    MINUS (292) 40 45
    STAR (293) 41
    DIV (294) 42
    MOD (295) 43
    NOT (296) 44
    INTLIT (297) 47
    REALLIT (298) 48
    FUNC (299) 14


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    Program (52)
        on left: 1
        on right: 0
    Program_1 (53)
        on left: 2 3
        on right: 1
    Declarations (54)
        on left: 4 5 6
        on right: 2 4 5
    VarDeclaration (55)
        on left: 7 8
        on right: 4 17
    VarSpec (56)
        on left: 9
        on right: 7 8
    Type (57)
        on left: 10 11 12 13
        on right: 9 14 15
    FuncDeclaration (58)
        on left: 14
        on right: 5
    Parameters (59)
        on left: 15
        on right: 14
    FuncBody (60)
        on left: 16
        on right: 14
    VarsAndStatements (61)
        on left: 17 18 19
        on right: 16 17
    Statement (62)
        on left: 20 21 22 23 24 25 26 27 28
        on right: 18 21 22 23
    ParseArgs (63)
        on left: 29
        on right: 26
    FuncInvocation (64)
        on left: 30
        on right: 25 50
    Expr (65)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 20 22 23 24 27 29 30 31 32 33 38 39 43 46 51


State 0

    0 $accept: • Program $end

    PACKAGE  shift, and go to state 1

    Program  go to state 2


State 1

    1 Program: PACKAGE • ID SEMICOLON Program_1

    ID  shift, and go to state 3


State 2

    0 $accept: Program • $end

    $end  shift, and go to state 4


State 3

    1 Program: PACKAGE ID • SEMICOLON Program_1

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: Program $end •

    $default  accept


State 5

    1 Program: PACKAGE ID SEMICOLON • Program_1

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $end      reduce using rule 3 (Program_1)
    $end      [reduce using rule 6 (Declarations)]
    $default  reduce using rule 3 (Program_1)

    Program_1        go to state 8
    Declarations     go to state 9
    VarDeclaration   go to state 10
    FuncDeclaration  go to state 11


State 6

    7 VarDeclaration: VAR • VarSpec
    8               | VAR • LPAR VarSpec SEMICOLON RPAR

    ID    shift, and go to state 12
    LPAR  shift, and go to state 13

    VarSpec  go to state 14


State 7

   14 FuncDeclaration: FUNC • ID LPAR '[' Parameters ']' RPAR '[' Type ']' FuncBody

    ID  shift, and go to state 15


State 8

    1 Program: PACKAGE ID SEMICOLON Program_1 •

    $default  reduce using rule 1 (Program)


State 9

    2 Program_1: Declarations •

    $default  reduce using rule 2 (Program_1)


State 10

    4 Declarations: VarDeclaration • SEMICOLON Declarations

    SEMICOLON  shift, and go to state 16


State 11

    5 Declarations: FuncDeclaration • SEMICOLON Declarations

    SEMICOLON  shift, and go to state 17


State 12

    9 VarSpec: ID • '{' COMMA ID '}' Type

    '{'  shift, and go to state 18


State 13

    8 VarDeclaration: VAR LPAR • VarSpec SEMICOLON RPAR

    ID  shift, and go to state 12

    VarSpec  go to state 19


State 14

    7 VarDeclaration: VAR VarSpec •

    $default  reduce using rule 7 (VarDeclaration)


State 15

   14 FuncDeclaration: FUNC ID • LPAR '[' Parameters ']' RPAR '[' Type ']' FuncBody

    LPAR  shift, and go to state 20


State 16

    4 Declarations: VarDeclaration SEMICOLON • Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 6 (Declarations)

    Declarations     go to state 21
    VarDeclaration   go to state 10
    FuncDeclaration  go to state 11


State 17

    5 Declarations: FuncDeclaration SEMICOLON • Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 6 (Declarations)

    Declarations     go to state 22
    VarDeclaration   go to state 10
    FuncDeclaration  go to state 11


State 18

    9 VarSpec: ID '{' • COMMA ID '}' Type

    COMMA  shift, and go to state 23


State 19

    8 VarDeclaration: VAR LPAR VarSpec • SEMICOLON RPAR

    SEMICOLON  shift, and go to state 24


State 20

   14 FuncDeclaration: FUNC ID LPAR • '[' Parameters ']' RPAR '[' Type ']' FuncBody

    '['  shift, and go to state 25


State 21

    4 Declarations: VarDeclaration SEMICOLON Declarations •

    $default  reduce using rule 4 (Declarations)


State 22

    5 Declarations: FuncDeclaration SEMICOLON Declarations •

    $default  reduce using rule 5 (Declarations)


State 23

    9 VarSpec: ID '{' COMMA • ID '}' Type

    ID  shift, and go to state 26


State 24

    8 VarDeclaration: VAR LPAR VarSpec SEMICOLON • RPAR

    RPAR  shift, and go to state 27


State 25

   14 FuncDeclaration: FUNC ID LPAR '[' • Parameters ']' RPAR '[' Type ']' FuncBody

    ID  shift, and go to state 28

    Parameters  go to state 29


State 26

    9 VarSpec: ID '{' COMMA ID • '}' Type

    '}'  shift, and go to state 30


State 27

    8 VarDeclaration: VAR LPAR VarSpec SEMICOLON RPAR •

    $default  reduce using rule 8 (VarDeclaration)


State 28

   15 Parameters: ID • Type '{' COMMA ID Type '}'

    INT      shift, and go to state 31
    FLOAT32  shift, and go to state 32
    BOOL     shift, and go to state 33
    STRING   shift, and go to state 34

    Type  go to state 35


State 29

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters • ']' RPAR '[' Type ']' FuncBody

    ']'  shift, and go to state 36


State 30

    9 VarSpec: ID '{' COMMA ID '}' • Type

    INT      shift, and go to state 31
    FLOAT32  shift, and go to state 32
    BOOL     shift, and go to state 33
    STRING   shift, and go to state 34

    Type  go to state 37


State 31

   10 Type: INT •

    $default  reduce using rule 10 (Type)


State 32

   11 Type: FLOAT32 •

    $default  reduce using rule 11 (Type)


State 33

   12 Type: BOOL •

    $default  reduce using rule 12 (Type)


State 34

   13 Type: STRING •

    $default  reduce using rule 13 (Type)


State 35

   15 Parameters: ID Type • '{' COMMA ID Type '}'

    '{'  shift, and go to state 38


State 36

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' • RPAR '[' Type ']' FuncBody

    RPAR  shift, and go to state 39


State 37

    9 VarSpec: ID '{' COMMA ID '}' Type •

    $default  reduce using rule 9 (VarSpec)


State 38

   15 Parameters: ID Type '{' • COMMA ID Type '}'

    COMMA  shift, and go to state 40


State 39

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR • '[' Type ']' FuncBody

    '['  shift, and go to state 41


State 40

   15 Parameters: ID Type '{' COMMA • ID Type '}'

    ID  shift, and go to state 42


State 41

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR '[' • Type ']' FuncBody

    INT      shift, and go to state 31
    FLOAT32  shift, and go to state 32
    BOOL     shift, and go to state 33
    STRING   shift, and go to state 34

    Type  go to state 43


State 42

   15 Parameters: ID Type '{' COMMA ID • Type '}'

    INT      shift, and go to state 31
    FLOAT32  shift, and go to state 32
    BOOL     shift, and go to state 33
    STRING   shift, and go to state 34

    Type  go to state 44


State 43

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR '[' Type • ']' FuncBody

    ']'  shift, and go to state 45


State 44

   15 Parameters: ID Type '{' COMMA ID Type • '}'

    '}'  shift, and go to state 46


State 45

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR '[' Type ']' • FuncBody

    LBRACE  shift, and go to state 47

    FuncBody  go to state 48


State 46

   15 Parameters: ID Type '{' COMMA ID Type '}' •

    $default  reduce using rule 15 (Parameters)


State 47

   16 FuncBody: LBRACE • VarsAndStatements RBRACE

    ID      shift, and go to state 49
    LBRACE  shift, and go to state 50
    IF      shift, and go to state 51
    RETURN  shift, and go to state 52
    FOR     shift, and go to state 53
    PRINT   shift, and go to state 54
    STRLIT  shift, and go to state 55

    $default  reduce using rule 19 (VarsAndStatements)

    VarsAndStatements  go to state 56
    Statement          go to state 57
    ParseArgs          go to state 58
    FuncInvocation     go to state 59


State 48

   14 FuncDeclaration: FUNC ID LPAR '[' Parameters ']' RPAR '[' Type ']' FuncBody •

    $default  reduce using rule 14 (FuncDeclaration)


State 49

   20 Statement: ID • ASSIGN Expr
   29 ParseArgs: ID • COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   30 FuncInvocation: ID • LPAR '[' Expr '{' COMMA Expr '}' ']' RPAR

    LPAR    shift, and go to state 60
    COMMA   shift, and go to state 61
    ASSIGN  shift, and go to state 62


State 50

   21 Statement: LBRACE • '{' Statement SEMICOLON '}' RBRACE

    '{'  shift, and go to state 63


State 51

   22 Statement: IF • Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 81


State 52

   24 Statement: RETURN • '[' Expr ']'

    '['  shift, and go to state 82


State 53

   23 Statement: FOR • '[' Expr ']' LBRACE '{' Statement SEMICOLON '}' RBRACE

    '['  shift, and go to state 83


State 54

   27 Statement: PRINT • LPAR '(' Expr

    LPAR  shift, and go to state 84


State 55

   28 Statement: STRLIT • ')' RPAR

    ')'  shift, and go to state 85


State 56

   16 FuncBody: LBRACE VarsAndStatements • RBRACE
   17 VarsAndStatements: VarsAndStatements • '[' VarDeclaration

    RBRACE  shift, and go to state 86
    '['     shift, and go to state 87


State 57

   18 VarsAndStatements: Statement • ']' SEMICOLON

    ']'  shift, and go to state 88


State 58

   26 Statement: ParseArgs •

    $default  reduce using rule 26 (Statement)


State 59

   25 Statement: FuncInvocation •

    $default  reduce using rule 25 (Statement)


State 60

   30 FuncInvocation: ID LPAR • '[' Expr '{' COMMA Expr '}' ']' RPAR

    '['  shift, and go to state 89


State 61

   29 ParseArgs: ID COMMA • BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    BLANKID  shift, and go to state 90


State 62

   20 Statement: ID ASSIGN • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 91


State 63

   21 Statement: LBRACE '{' • Statement SEMICOLON '}' RBRACE

    ID      shift, and go to state 49
    LBRACE  shift, and go to state 50
    IF      shift, and go to state 51
    RETURN  shift, and go to state 52
    FOR     shift, and go to state 53
    PRINT   shift, and go to state 54
    STRLIT  shift, and go to state 55

    Statement       go to state 92
    ParseArgs       go to state 58
    FuncInvocation  go to state 59


State 64

   30 FuncInvocation: ID • LPAR '[' Expr '{' COMMA Expr '}' ']' RPAR
   49 Expr: ID •

    LPAR  shift, and go to state 60

    $default  reduce using rule 49 (Expr)


State 65

   51 Expr: LPAR • Expr RPAR

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 93


State 66

   32 Expr: AND • ')' Expr

    ')'  shift, and go to state 94


State 67

   34 Expr: GT •

    $default  reduce using rule 34 (Expr)


State 68

   35 Expr: EQ •

    $default  reduce using rule 35 (Expr)


State 69

   36 Expr: NE •

    $default  reduce using rule 36 (Expr)


State 70

   37 Expr: LE •

    $default  reduce using rule 37 (Expr)


State 71

   38 Expr: GE • ')' Expr

    ')'  shift, and go to state 95


State 72

   46 Expr: PLUS • ')' Expr

    ')'  shift, and go to state 96


State 73

   40 Expr: MINUS •
   45     | MINUS •

    SEMICOLON  reduce using rule 40 (Expr)
    SEMICOLON  [reduce using rule 45 (Expr)]
    RPAR       reduce using rule 40 (Expr)
    RPAR       [reduce using rule 45 (Expr)]
    LBRACE     reduce using rule 40 (Expr)
    LBRACE     [reduce using rule 45 (Expr)]
    RSQ        reduce using rule 40 (Expr)
    RSQ        [reduce using rule 45 (Expr)]
    '{'        reduce using rule 40 (Expr)
    '{'        [reduce using rule 45 (Expr)]
    '}'        reduce using rule 40 (Expr)
    '}'        [reduce using rule 45 (Expr)]
    ']'        reduce using rule 40 (Expr)
    ']'        [reduce using rule 45 (Expr)]
    '('        reduce using rule 40 (Expr)
    '('        [reduce using rule 45 (Expr)]
    $default   reduce using rule 40 (Expr)


State 74

   41 Expr: STAR •

    $default  reduce using rule 41 (Expr)


State 75

   42 Expr: DIV •

    $default  reduce using rule 42 (Expr)


State 76

   43 Expr: MOD • ')' Expr

    ')'  shift, and go to state 97


State 77

   47 Expr: INTLIT •

    $default  reduce using rule 47 (Expr)


State 78

   48 Expr: REALLIT •

    $default  reduce using rule 48 (Expr)


State 79

   44 Expr: '(' • NOT

    NOT  shift, and go to state 98


State 80

   50 Expr: FuncInvocation •

    $default  reduce using rule 50 (Expr)


State 81

   22 Statement: IF Expr • LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    LBRACE  shift, and go to state 99
    '('     shift, and go to state 100


State 82

   24 Statement: RETURN '[' • Expr ']'

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 101


State 83

   23 Statement: FOR '[' • Expr ']' LBRACE '{' Statement SEMICOLON '}' RBRACE

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 102


State 84

   27 Statement: PRINT LPAR • '(' Expr

    '('  shift, and go to state 103


State 85

   28 Statement: STRLIT ')' • RPAR

    RPAR  shift, and go to state 104


State 86

   16 FuncBody: LBRACE VarsAndStatements RBRACE •

    $default  reduce using rule 16 (FuncBody)


State 87

   17 VarsAndStatements: VarsAndStatements '[' • VarDeclaration

    VAR  shift, and go to state 6

    VarDeclaration  go to state 105


State 88

   18 VarsAndStatements: Statement ']' • SEMICOLON

    SEMICOLON  shift, and go to state 106


State 89

   30 FuncInvocation: ID LPAR '[' • Expr '{' COMMA Expr '}' ']' RPAR

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 107


State 90

   29 ParseArgs: ID COMMA BLANKID • ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    ASSIGN  shift, and go to state 108


State 91

   20 Statement: ID ASSIGN Expr •
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    '('  shift, and go to state 100

    $default  reduce using rule 20 (Statement)


State 92

   21 Statement: LBRACE '{' Statement • SEMICOLON '}' RBRACE

    SEMICOLON  shift, and go to state 109


State 93

   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS
   51     | LPAR Expr • RPAR

    RPAR  shift, and go to state 110
    '('   shift, and go to state 100


State 94

   32 Expr: AND ')' • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 111


State 95

   38 Expr: GE ')' • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 112


State 96

   46 Expr: PLUS ')' • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 113


State 97

   43 Expr: MOD ')' • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 114


State 98

   44 Expr: '(' NOT •

    $default  reduce using rule 44 (Expr)


State 99

   22 Statement: IF Expr LBRACE • '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    '{'  shift, and go to state 115


State 100

   31 Expr: Expr '(' • OR
   33     | Expr '(' • LT
   39     | Expr '(' • PLUS

    OR    shift, and go to state 116
    LT    shift, and go to state 117
    PLUS  shift, and go to state 118


State 101

   24 Statement: RETURN '[' Expr • ']'
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    ']'  shift, and go to state 119
    '('  shift, and go to state 100


State 102

   23 Statement: FOR '[' Expr • ']' LBRACE '{' Statement SEMICOLON '}' RBRACE
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    ']'  shift, and go to state 120
    '('  shift, and go to state 100


State 103

   27 Statement: PRINT LPAR '(' • Expr

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 121


State 104

   28 Statement: STRLIT ')' RPAR •

    $default  reduce using rule 28 (Statement)


State 105

   17 VarsAndStatements: VarsAndStatements '[' VarDeclaration •

    $default  reduce using rule 17 (VarsAndStatements)


State 106

   18 VarsAndStatements: Statement ']' SEMICOLON •

    $default  reduce using rule 18 (VarsAndStatements)


State 107

   30 FuncInvocation: ID LPAR '[' Expr • '{' COMMA Expr '}' ']' RPAR
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    '{'  shift, and go to state 122
    '('  shift, and go to state 100


State 108

   29 ParseArgs: ID COMMA BLANKID ASSIGN • PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    PARSEINT  shift, and go to state 123


State 109

   21 Statement: LBRACE '{' Statement SEMICOLON • '}' RBRACE

    '}'  shift, and go to state 124


State 110

   51 Expr: LPAR Expr RPAR •

    $default  reduce using rule 51 (Expr)


State 111

   31 Expr: Expr • '(' OR
   32     | AND ')' Expr •
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    '('  shift, and go to state 100

    '('       [reduce using rule 32 (Expr)]
    $default  reduce using rule 32 (Expr)


State 112

   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   38     | GE ')' Expr •
   39     | Expr • '(' PLUS

    '('  shift, and go to state 100

    '('       [reduce using rule 38 (Expr)]
    $default  reduce using rule 38 (Expr)


State 113

   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS
   46     | PLUS ')' Expr •

    '('  shift, and go to state 100

    '('       [reduce using rule 46 (Expr)]
    $default  reduce using rule 46 (Expr)


State 114

   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS
   43     | MOD ')' Expr •

    '('  shift, and go to state 100

    '('       [reduce using rule 43 (Expr)]
    $default  reduce using rule 43 (Expr)


State 115

   22 Statement: IF Expr LBRACE '{' • Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    ID      shift, and go to state 49
    LBRACE  shift, and go to state 50
    IF      shift, and go to state 51
    RETURN  shift, and go to state 52
    FOR     shift, and go to state 53
    PRINT   shift, and go to state 54
    STRLIT  shift, and go to state 55

    Statement       go to state 125
    ParseArgs       go to state 58
    FuncInvocation  go to state 59


State 116

   31 Expr: Expr '(' OR •

    $default  reduce using rule 31 (Expr)


State 117

   33 Expr: Expr '(' LT •

    $default  reduce using rule 33 (Expr)


State 118

   39 Expr: Expr '(' PLUS •

    $default  reduce using rule 39 (Expr)


State 119

   24 Statement: RETURN '[' Expr ']' •

    $default  reduce using rule 24 (Statement)


State 120

   23 Statement: FOR '[' Expr ']' • LBRACE '{' Statement SEMICOLON '}' RBRACE

    LBRACE  shift, and go to state 126


State 121

   27 Statement: PRINT LPAR '(' Expr •
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    '('  shift, and go to state 100

    $default  reduce using rule 27 (Statement)


State 122

   30 FuncInvocation: ID LPAR '[' Expr '{' • COMMA Expr '}' ']' RPAR

    COMMA  shift, and go to state 127


State 123

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT • LPAR CMDARGS LSQ Expr RSQ RPAR

    LPAR  shift, and go to state 128


State 124

   21 Statement: LBRACE '{' Statement SEMICOLON '}' • RBRACE

    RBRACE  shift, and go to state 129


State 125

   22 Statement: IF Expr LBRACE '{' Statement • SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    SEMICOLON  shift, and go to state 130


State 126

   23 Statement: FOR '[' Expr ']' LBRACE • '{' Statement SEMICOLON '}' RBRACE

    '{'  shift, and go to state 131


State 127

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA • Expr '}' ']' RPAR

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 132


State 128

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR • CMDARGS LSQ Expr RSQ RPAR

    CMDARGS  shift, and go to state 133


State 129

   21 Statement: LBRACE '{' Statement SEMICOLON '}' RBRACE •

    $default  reduce using rule 21 (Statement)


State 130

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON • '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    '}'  shift, and go to state 134


State 131

   23 Statement: FOR '[' Expr ']' LBRACE '{' • Statement SEMICOLON '}' RBRACE

    ID      shift, and go to state 49
    LBRACE  shift, and go to state 50
    IF      shift, and go to state 51
    RETURN  shift, and go to state 52
    FOR     shift, and go to state 53
    PRINT   shift, and go to state 54
    STRLIT  shift, and go to state 55

    Statement       go to state 135
    ParseArgs       go to state 58
    FuncInvocation  go to state 59


State 132

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA Expr • '}' ']' RPAR
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    '}'  shift, and go to state 136
    '('  shift, and go to state 100


State 133

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS • LSQ Expr RSQ RPAR

    LSQ  shift, and go to state 137


State 134

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' • RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    RBRACE  shift, and go to state 138


State 135

   23 Statement: FOR '[' Expr ']' LBRACE '{' Statement • SEMICOLON '}' RBRACE

    SEMICOLON  shift, and go to state 139


State 136

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA Expr '}' • ']' RPAR

    ']'  shift, and go to state 140


State 137

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ • Expr RSQ RPAR

    ID       shift, and go to state 64
    LPAR     shift, and go to state 65
    AND      shift, and go to state 66
    GT       shift, and go to state 67
    EQ       shift, and go to state 68
    NE       shift, and go to state 69
    LE       shift, and go to state 70
    GE       shift, and go to state 71
    PLUS     shift, and go to state 72
    MINUS    shift, and go to state 73
    STAR     shift, and go to state 74
    DIV      shift, and go to state 75
    MOD      shift, and go to state 76
    INTLIT   shift, and go to state 77
    REALLIT  shift, and go to state 78
    '('      shift, and go to state 79

    FuncInvocation  go to state 80
    Expr            go to state 141


State 138

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE • '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    '['  shift, and go to state 142


State 139

   23 Statement: FOR '[' Expr ']' LBRACE '{' Statement SEMICOLON • '}' RBRACE

    '}'  shift, and go to state 143


State 140

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA Expr '}' ']' • RPAR

    RPAR  shift, and go to state 144


State 141

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr • RSQ RPAR
   31 Expr: Expr • '(' OR
   33     | Expr • '(' LT
   39     | Expr • '(' PLUS

    RSQ  shift, and go to state 145
    '('  shift, and go to state 100


State 142

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' • ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    ELSE  shift, and go to state 146


State 143

   23 Statement: FOR '[' Expr ']' LBRACE '{' Statement SEMICOLON '}' • RBRACE

    RBRACE  shift, and go to state 147


State 144

   30 FuncInvocation: ID LPAR '[' Expr '{' COMMA Expr '}' ']' RPAR •

    $default  reduce using rule 30 (FuncInvocation)


State 145

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ • RPAR

    RPAR  shift, and go to state 148


State 146

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE • LBRACE '{' Statement SEMICOLON '}' RBRACE ']'

    LBRACE  shift, and go to state 149


State 147

   23 Statement: FOR '[' Expr ']' LBRACE '{' Statement SEMICOLON '}' RBRACE •

    $default  reduce using rule 23 (Statement)


State 148

   29 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR •

    $default  reduce using rule 29 (ParseArgs)


State 149

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE • '{' Statement SEMICOLON '}' RBRACE ']'

    '{'  shift, and go to state 150


State 150

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' • Statement SEMICOLON '}' RBRACE ']'

    ID      shift, and go to state 49
    LBRACE  shift, and go to state 50
    IF      shift, and go to state 51
    RETURN  shift, and go to state 52
    FOR     shift, and go to state 53
    PRINT   shift, and go to state 54
    STRLIT  shift, and go to state 55

    Statement       go to state 151
    ParseArgs       go to state 58
    FuncInvocation  go to state 59


State 151

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement • SEMICOLON '}' RBRACE ']'

    SEMICOLON  shift, and go to state 152


State 152

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON • '}' RBRACE ']'

    '}'  shift, and go to state 153


State 153

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' • RBRACE ']'

    RBRACE  shift, and go to state 154


State 154

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE • ']'

    ']'  shift, and go to state 155


State 155

   22 Statement: IF Expr LBRACE '{' Statement SEMICOLON '}' RBRACE '[' ELSE LBRACE '{' Statement SEMICOLON '}' RBRACE ']' •

    $default  reduce using rule 22 (Statement)
